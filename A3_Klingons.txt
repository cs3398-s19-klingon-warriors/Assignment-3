CS 3398
Assignment 3
Team: Klingons

Team Members and Files:
1. Sarah Gibbons - SuperWorker.java, ThreeSolidMain.java
2. Talon Sjostrom - Robot.java
3. Rachel Kelmenson - Manager.java
4. Abel Shinabery - IWorkable.java, IFeedable.java
5. Serena Gutierrez - Worker.java

Explanations (per file):

==============================
SuperWorker.java
==============================
Adheres to open close principle: opened for extension, closed for modification. Note: we kept SuperWorker.java separate from Workers.java (by single responsibility); keeping them separate allows changes to one without risking changes to another. SuperWorker and Worker may have different roles in the company and need different modifications, so by single-responsibility it makes sense to separate the files. SuperWorker implements two interfaces, so it can extend/modify without changing the original interface code (which follows open-close). SuperWorker implements two specific interfaces which get it exactly the methods it needs and none that it doesn't.

==============================
IWorkable.java, IFeedable.java
==============================
Adheres to the interface segregation principle.
By separating the original interface, IWorker, into two distinct interfaces (IWorkable and IFeedable), we allow classes that implement the interfaces to implement only the necessary functions. For instance, in the case of the Robot
class: Robots can work, but they cannot eat, so it was a waste of code to have them
implement an eat function when they would never use it. Worker and SuperWorker both work and eat, so they have the option to implement both IWorkable and IFeedable classes. Keeping the interfaces small and simple also adheres to open-close: an entirely new type of worker (perhaps a Cyborg) or employee (perhaps a Consultant who isn't a Worker) may implement the existing interfaces and an additional interface could be added for new needs - extending but not modifying the current interface code. Single-responsiblity also applies by keeping the interfaces in different files, since eaters and workers may be relevant to different departments (Catering vs. Payroll), and changes to these interfaces may occur separately.

============
Worker.java
============
Adheres to open close & single responsibility.
By having the class separated from other worker types, we could extend it to add
more functionality which applies to the open close principle.
Furthermore, single responsibility applies as each class is organized by individual
responsibilities.

============
Robot.java
============
Adheres to Open Close & Single Responsibility principles.
The Robot class only uses one interface (IWorkable), not both (IWorkable + IFeedable) like Worker and SuperWorker do. Since Robots do not need to eat(), interface segregation enables a Robot to only implement the method it needs, work(). Robots may be extended or given additional features that are very different than a human Worker, so it makes sense by single-responsibility and open-close to keep the Robot class in a separate file. Robots implementing IWorkable works with open-close, since the original IWorkable interface is not changed but Robots can extend and perhaps modify themselves later.


============
Manager.java
============
Manager is a distinct entity in the "workplace", with tasks and responsibilities separate from any other. It is not a worker, nor does it implement an interface (although you would think Managers have to eat!). For this reason, it makes sense to split Manager off into its own file. The Manager class is likely to be used or changed by users who may have nothing to do with the Worker classes, so keeping it separate aligns with the single responsibility principle. In future, users may want to make different types of managers - perhaps managers for different departments, or at different levels in the hierarchy. Open/close would recommend that those users extend the existing Manager class, rather than modify the class as it currently is. That may also be the case if different Managers need to have additional Workers or be able to issue more instructions. Since Manager is not an interface, the interface segregation principle doesn't apply to the class itself, but it does apply to the worker that this Manager manages. This Manager now uses an IWorkable worker, as opposed to the previous IWorker. The difference is that the old IWorker interface had methods to both work() and eat(), while IWorkable only does work(). Though Manager does not implement this interface, the Manager does not care if the worker eats; Manager only calls the work() method. In this case, separating the IWorker into two interfaces by the interface segregation principle helps focus the Manager's sphere of influence - in this form, the Manager would be unlikely (or perhaps unable) to overstep their bounds and tell the worker when to eat().

============
ThreeSolidMain.java
============
By separating the ThreeSolidMain class:
1) We respect the Single Responsibility Principle because the only function of this class is to run the program. Changes to this file only impact program execution or actions; those changes do not affect the classes and interfaces in other files
2) We don't adhere to the Open Close principle since we may change algorithms the best approach in running the program.
3) We also don't adhere to the Interface Segregation Principle since there are no interfaces declared or implemented in this class.

============
Additional Notes
============

Team discussion and planning was conducted daily on semi-private Slack channel and Trello board. We expect to integrate this more with the public Slack and ZenHub in the future! (Late-stage edits were discussed on Slack and then implemented by specific team members to minimize conflicts.)
